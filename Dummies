# Digitale Natuurkunde MVP – Next.js + Supabase

Een minimale, maar werkende skeleton voor een digitale Natuurkunde-methode (MAVO/HAVO) met adaptieve quiz, voortgangsopslaan in Supabase en een docentvriendelijke structuur.

> **Stack**: Next.js (App Router, TypeScript), Tailwind, KaTeX, Supabase (Auth + Database), Vercel deploy.

---

## 0) Directory-structuur

```
root
├─ app
│  ├─ (public)
│  │  ├─ page.tsx                 # Lessenoverzicht
│  │  └─ module
│  │     └─ [id]
│  │        └─ page.tsx           # Lesweergave + blokkenrenderer
│  ├─ login
│  │  └─ page.tsx                 # Supabase magic-link login
│  └─ api
│     └─ health
│        └─ route.ts              # Healthcheck
├─ components
│  ├─ BlockRenderer.tsx           # Renderen context/theory/sim/quiz/exit-ticket
│  ├─ Quiz.tsx                    # Adaptieve quizcomponent
│  ├─ Header.tsx
│  └─ Protected.tsx               # Gate voor ingelogde users
├─ content
│  └─ modules
│     └─ beweging-snelheid.json   # Module 1 content
├─ lib
│  ├─ adaptive.ts                 # Beslislogica M/V/H
│  ├─ supabaseClient.ts           # Client-side Supabase
│  ├─ types.ts                    # TypeScript types
│  └─ katex.tsx                   # KaTeX teX-render helper
├─ public
│  └─ phet-moving-man.html        # PhET embed wrapper (optioneel)
├─ styles
│  └─ globals.css
├─ .env.local.example
├─ package.json
├─ next.config.ts
├─ postcss.config.js
├─ tailwind.config.ts
└─ README.md
```

---

## 1) package.json

```json
{
  "name": "natuurkunde-mvp",
  "version": "0.1.0",
  "private": true,
  "scripts": {
    "dev": "next dev",
    "build": "next build",
    "start": "next start",
    "lint": "next lint"
  },
  "dependencies": {
    "@supabase/supabase-js": "^2.45.4",
    "katex": "^0.16.10",
    "next": "^14.2.5",
    "react": "^18.2.0",
    "react-dom": "^18.2.0"
  },
  "devDependencies": {
    "autoprefixer": "^10.4.18",
    "postcss": "^8.4.38",
    "tailwindcss": "^3.4.10",
    "typescript": "^5.4.5"
  }
}
```

---

## 2) next.config.ts

```ts
import type { NextConfig } from 'next'

const nextConfig: NextConfig = {
  reactStrictMode: true,
}
export default nextConfig
```

---

## 3) tailwind.config.ts

```ts
import type { Config } from 'tailwindcss'

const config: Config = {
  content: [
    './app/**/*.{ts,tsx}',
    './components/**/*.{ts,tsx}',
  ],
  theme: {
    extend: {},
  },
  plugins: [],
}
export default config
```

---

## 4) styles/globals.css

```css
@tailwind base;
@tailwind components;
@tailwind utilities;

.katex-display { margin: 0.5rem 0; }
```

---

## 5) lib/types.ts

```ts
export type Block =
  | { type: 'context'; md: string }
  | { type: 'theory'; md: string }
  | { type: 'example'; md: string }
  | { type: 'simulation'; provider: 'phet'; simId: string; prompts?: string[] }
  | { type: 'quiz'; engine: 'adaptive'; bankRef: string }
  | { type: 'exit_ticket'; items: string[] }

export type Module = {
  id: string
  title: string
  level: 'MAVO' | 'HAVO' | 'MAVO|HAVO'
  goals: string[]
  blocks: Block[]
  meta: { tags: string[]; est_time_min: number }
}

export type QuizItem = {
  id: string
  stem: string
  type: 'mc' | 'num'
  options?: { key: string; label: string }[]
  answer: string | number
  tolerance?: number
  hint?: string
}
```

---

## 6) lib/supabaseClient.ts

```ts
'use client'
import { createClient } from '@supabase/supabase-js'

export const supabase = createClient(
  process.env.NEXT_PUBLIC_SUPABASE_URL!,
  process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!
)
```

---

## 7) lib/adaptive.ts

```ts
export type Path = 'V' | 'M' | 'H'

export function decidePath(score: number, timeOnTaskSec: number, commonError?: string): Path {
  if (score >= 0.8 && timeOnTaskSec >= 60) return 'H'
  if (score < 0.5 || commonError === 'units') return 'V'
  return 'M'
}
```

---

## 8) lib/katex.tsx

```tsx
'use client'
import 'katex/dist/katex.min.css'
import TeX from 'katex'
import { useEffect, useRef } from 'react'

export function KaTeX({ tex }: { tex: string }) {
  const ref = useRef<HTMLDivElement>(null)
  useEffect(() => {
    if (!ref.current) return
    ref.current.innerHTML = ''
    TeX.render(tex, ref.current, { displayMode: true, throwOnError: false })
  }, [tex])
  return <div ref={ref} />
}
```

---

## 9) content/modules/beweging-snelheid.json

```json
{
  "id": "mod-beweging-01",
  "title": "Beweging & Snelheid",
  "level": "MAVO|HAVO",
  "goals": [
    "MAVO: Ik kan v = s/t gebruiken en eenheden omrekenen (km/h ↔ m/s).",
    "HAVO: Ik kan v bepalen uit de helling van een s-t grafiek en modelkeuzes verantwoorden."
  ],
  "blocks": [
    { "type": "context", "md": "Je fietst 3,6 km in 12 minuten naar school. Hoe snel ga je?" },
    { "type": "theory", "md": "Snelheid: $$v=\\frac{s}{t}$$ met s in meter en t in seconde. Omrekenen: $$1\\,\n\,\n\,km/h = \\frac{1000}{3600}\\,m/s = 0{,}277\\,m/s$$" },
    { "type": "example", "md": "Voorbeeld: 3{,}6 km in 12 min → s = 3600 m, t = 720 s, dus v = 5 m/s = 18 km/h." },
    { "type": "simulation", "provider": "phet", "simId": "moving-man", "prompts": ["Varieer s en t en noteer v.", "Wat gebeurt er met v als t halveert?"] },
    { "type": "quiz", "engine": "adaptive", "bankRef": "qb-speed-01" },
    { "type": "exit_ticket", "items": ["Wat is het belangrijkste inzicht van vandaag?", "Waar wil je extra oefening op?"] }
  ],
  "meta": { "tags": ["beweging", "snelheid"], "est_time_min": 50 }
}
```

---

## 10) app/(public)/page.tsx – Lessenoverzicht

```tsx
import fs from 'node:fs'
import path from 'node:path'
import Link from 'next/link'

export default async function Page() {
  const file = path.join(process.cwd(), 'content/modules/beweging-snelheid.json')
  const mod = JSON.parse(fs.readFileSync(file, 'utf-8'))
  return (
    <main className="max-w-3xl mx-auto p-6">
      <h1 className="text-2xl font-bold mb-4">Digitale Natuurkunde – Modules</h1>
      <ul className="space-y-3">
        <li className="p-4 border rounded-xl">
          <div className="font-semibold">{mod.title}</div>
          <div className="text-sm text-gray-600">Niveau: {mod.level}</div>
          <Link className="inline-block mt-2 underline" href={`/module/${mod.id}`}>Open</Link>
        </li>
      </ul>
    </main>
  )
}
```

---

## 11) app/(public)/module/\[id]/page.tsx – Lesspeler

```tsx
import fs from 'node:fs'
import path from 'node:path'
import { notFound } from 'next/navigation'
import BlockRenderer from '@/components/BlockRenderer'
import Protected from '@/components/Protected'

export default async function ModulePage({ params }: { params: { id: string } }) {
  const file = path.join(process.cwd(), `content/modules/beweging-snelheid.json`)
  if (!fs.existsSync(file)) return notFound()
  const mod = JSON.parse(fs.readFileSync(file, 'utf-8'))
  if (mod.id !== params.id) return notFound()

  return (
    <Protected>
      <main className="max-w-3xl mx-auto p-6 space-y-6">
        <h1 className="text-2xl font-bold">{mod.title}</h1>
        {mod.blocks.map((b: any, i: number) => (
          <BlockRenderer key={i} block={b} moduleId={mod.id} />
        ))}
      </main>
    </Protected>
  )
}
```

---

## 12) components/Protected.tsx – login gate

```tsx
'use client'
import { supabase } from '@/lib/supabaseClient'
import { useEffect, useState } from 'react'
import Link from 'next/link'

export default function Protected({ children }: { children: React.ReactNode }) {
  const [session, setSession] = useState<any>(null)
  const [loading, setLoading] = useState(true)
  useEffect(() => {
    supabase.auth.getSession().then(({ data }) => {
      setSession(data.session)
      setLoading(false)
    })
    const { data: sub } = supabase.auth.onAuthStateChange((_e, s) => setSession(s))
    return () => sub.subscription.unsubscribe()
  }, [])
  if (loading) return <div className="p-6">Laden…</div>
  if (!session) return (
    <div className="p-6">
      <p>Je moet eerst inloggen.</p>
      <Link href="/login" className="underline">Ga naar login</Link>
    </div>
  )
  return <>{children}</>
}
```

---

## 13) app/login/page.tsx – magic link login

```tsx
'use client'
import { FormEvent, useState } from 'react'
import { supabase } from '@/lib/supabaseClient'

export default function LoginPage() {
  const [email, setEmail] = useState('')
  const [sent, setSent] = useState(false)
  const onSubmit = async (e: FormEvent) => {
    e.preventDefault()
    const { error } = await supabase.auth.signInWithOtp({ email, options: { emailRedirectTo: window.location.origin } })
    if (!error) setSent(true)
  }
  return (
    <main className="max-w-md mx-auto p-6 space-y-4">
      <h1 className="text-xl font-semibold">Inloggen</h1>
      {sent ? (
        <p>Check je e-mail voor de inloglink.</p>
      ) : (
        <form onSubmit={onSubmit} className="space-y-3">
          <input className="border p-2 w-full rounded" placeholder="jij@school.nl" value={email} onChange={e=>setEmail(e.target.value)} />
          <button className="border px-4 py-2 rounded" type="submit">Stuur magic link</button>
        </form>
      )}
    </main>
  )
}
```

---

## 14) components/BlockRenderer.tsx

```tsx
'use client'
import { Block } from '@/lib/types'
import Quiz from './Quiz'
import { KaTeX } from '@/lib/katex'

export default function BlockRenderer({ block, moduleId }: { block: Block; moduleId: string }) {
  if (block.type === 'context' || block.type === 'example') {
    return <section className="p-4 border rounded-xl whitespace-pre-wrap">{(block as any).md}</section>
  }
  if (block.type === 'theory') {
    return <section className="p-4 border rounded-xl"><KaTeX tex={(block as any).md} /></section>
  }
  if (block.type === 'simulation') {
    const b = block as any
    const url = `https://phet.colorado.edu/sims/html/moving-man/latest/moving-man_all.html`
    return (
      <section className="p-4 border rounded-xl space-y-2">
        <iframe src={url} className="w-full h-96 border rounded" />
        {b.prompts?.length ? (
          <ul className="list-disc pl-6 text-sm">
            {b.prompts.map((p: string, i: number) => <li key={i}>{p}</li>)}
          </ul>
        ) : null}
      </section>
    )
  }
  if (block.type === 'quiz') {
    return <Quiz bankRef={(block as any).bankRef} moduleId={moduleId} />
  }
  if (block.type === 'exit_ticket') {
    const b = block as any
    return (
      <section className="p-4 border rounded-xl">
        <h3 className="font-semibold mb-2">Exit ticket</h3>
        <ol className="list-decimal pl-6 space-y-1">{b.items.map((q: string, i: number) => <li key={i}>{q}</li>)}</ol>
      </section>
    )
  }
  return null
}
```

---

## 15) components/Quiz.tsx

```tsx
'use client'
import { useEffect, useMemo, useState } from 'react'
import { decidePath } from '@/lib/adaptive'
import { supabase } from '@/lib/supabaseClient'
import type { QuizItem } from '@/lib/types'

const bank: Record<string, QuizItem[]> = {
  'qb-speed-01': [
    { id: 'q1', stem: 'Reken 36 km/h om naar m/s.', type: 'num', answer: 10, tolerance: 0.1, hint: 'Deel door 3,6.' },
    { id: 'q2', stem: 'Een auto rijdt 1500 m in 75 s. Wat is v (m/s)?', type: 'num', answer: 20, tolerance: 0.1 },
    { id: 'q3', stem: 'Wat is juist?', type: 'mc', options: [
      { key: 'a', label: 'v = t/s' },
      { key: 'b', label: 'v = s·t' },
      { key: 'c', label: 'v = s/t' }
    ], answer: 'c', hint: 'Denk aan eenheden.' },
    { id: 'q4', stem: 'Fietstocht: s=3600 m, t=720 s. v in km/h?', type: 'num', answer: 18, tolerance: 0.2 },
    { id: 'q5', stem: 'Kies de SI-eenheid voor snelheid.', type: 'mc', options: [
      { key: 'a', label: 'km/h' }, { key: 'b', label: 'm/s' }, { key: 'c', label: 'm·s' }
    ], answer: 'b' },
    { id: 'q6', stem: 'Een renner loopt 400 m in 50 s. v (m/s)?', type: 'num', answer: 8, tolerance: 0.1 }
  ]
}

function evaluate(item: QuizItem, resp: string): { correct: boolean; commonError?: string } {
  if (item.type === 'mc') return { correct: resp === String(item.answer) }
  const val = Number(resp.replace(',', '.'))
  if (Number.isNaN(val)) return { correct: false }
  const tol = item.tolerance ?? 0
  const ok = Math.abs(val - Number(item.answer)) <= tol
  const commonError = !ok && Math.abs(val - Number(item.answer) * 3.6) <= (tol + 0.1) ? 'units' : undefined
  return { correct: ok, commonError }
}

export default function Quiz({ bankRef, moduleId }: { bankRef: string; moduleId: string }) {
  const items = bank[bankRef]
  const [idx, setIdx] = useState(0)
  const [resp, setResp] = useState('')
  const [score, setScore] = useState(0)
  const [errors, setErrors] = useState<string[]>([])
  const [start] = useState(Date.now())

  const item = items[idx]

  const onSubmit = async () => {
    const { correct, commonError } = evaluate(item, resp)
    setScore(s => s + (correct ? 1 : 0))
    if (!correct && commonError) setErrors(e => [...e, commonError])
    if (idx < items.length - 1) setIdx(i => i + 1)
    setResp('')
  }

  const finished = idx >= items.length - 1

  useEffect(() => {
    if (!finished) return
    const duration = (Date.now() - start) / 1000
    const p = decidePath(score / items.length, duration, errors.includes('units') ? 'units' : undefined)
    // Save attempt (anoniem per user-id)
    supabase.from('attempts').insert({ module_id: moduleId, score, total: items.length, duration_s: Math.round(duration), next_path: p })
  }, [finished])

  return (
    <section className="p-4 border rounded-xl space-y-3">
      <h3 className="font-semibold">Quiz</h3>
      <div className="font-medium">{item.stem}</div>
      {item.type === 'mc' ? (
        <div className="space-y-2">
          {item.options!.map(o => (
            <label key={o.key} className="flex items-center gap-2">
              <input type="radio" name="mc" onChange={() => setResp(o.key)} checked={resp===o.key} />{o.label}
            </label>
          ))}
        </div>
      ) : (
        <input className="border p-2 rounded w-40" value={resp} onChange={e=>setResp(e.target.value)} placeholder="antwoord" />
      )}
      <div className="flex gap-2">
        <button className="border px-3 py-1 rounded" onClick={onSubmit}>Check</button>
      </div>
      <div className="text-sm text-gray-600">{idx+1} / {items.length}</div>
    </section>
  )
}
```

---

## 16) app/api/health/route.ts

```ts
import { NextResponse } from 'next/server'
export async function GET() { return NextResponse.json({ ok: true }) }
```

---

## 17) app/layout.tsx (basis)

```tsx
import './globals.css'
import Link from 'next/link'

export default function RootLayout({ children }: { children: React.ReactNode }) {
  return (
    <html lang="nl">
      <body>
        <header className="border-b">
          <nav className="max-w-3xl mx-auto p-4 flex gap-4">
            <Link href="/">Modules</Link>
            <Link href="/login">Login</Link>
          </nav>
        </header>
        {children}
      </body>
    </html>
  )}
```

---

## 18) .env.local.example

```
NEXT_PUBLIC_SUPABASE_URL=https://YOUR_PROJECT.supabase.co
NEXT_PUBLIC_SUPABASE_ANON_KEY=YOUR_ANON_KEY
```

---

## 19) Supabase schema (SQL)

```sql
-- Tabel voor quizpogingen
create table if not exists public.attempts (
  id uuid primary key default gen_random_uuid(),
  user_id uuid,
  module_id text not null,
  score int not null,
  total int not null,
  duration_s int not null,
  next_path text check (next_path in ('V','M','H')),
  created_at timestamptz default now()
);

-- Auth user-id via Supabase Auth
alter table public.attempts enable row level security;
create policy "insert own" on public.attempts for insert
  with check (auth.uid() = user_id or user_id is null);
create policy "read own" on public.attempts for select
  using (auth.uid() = user_id or user_id is null);
```

> *Simpel beleid:* we staan nu anonieme inserts toe (user\_id null) voor snelheid. Wil je strikter, voeg clientcode toe die `user_id: (await supabase.auth.getUser()).data.user.id` meestuurt en maak `user_id` required.

---

## 20) README.md (samenvatting ontwikkelstappen)

```md
# Digitale Natuurkunde MVP

## Lokaal starten
1. `pnpm i` of `npm i`
2. `.env.local` aanmaken o.b.v. `.env.local.example`
3. `npm run dev`

## Deploy
- Importeer repo in Vercel
- Zet env vars: `NEXT_PUBLIC_SUPABASE_URL`, `NEXT_PUBLIC_SUPABASE_ANON_KEY`
- Run build

## Supabase
- Maak project (EU)
- Voer SQL uit bij `SQL Editor`
- Zet Auth → Providers → Email aan (magic links)

## Content
- Bewerk `content/modules/beweging-snelheid.json`
- Voeg meer modules toe en link ze op de homepage
```
